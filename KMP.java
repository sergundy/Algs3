package new_sem.lab_6;

public class KMP {
    private final int R;       // Переменная для хранения размера алфавита
    private final int m;       // Длина шаблона
    private int[][] dfa;       // Двумерный массив необходимы для построения DFA(Детерминированный конечный автомат)

    // Функция предварительно обрабатывает строку шаблона
    public KMP(String pat) {
        this.R = 256;
        this.m = pat.length();

        // Строим DFA(Детерминированный конечный автомат) из шаблона
        dfa = new int[R][m]; 
        dfa[pat.charAt(0)][0] = 1; 
        for (int x = 0, j = 1; j < m; j++) {
            for (int c = 0; c < R; c++) 
                dfa[c][j] = dfa[c][x];     // Копируем случаи несоовпадения 
            dfa[pat.charAt(j)][j] = j+1;   // Устанавливаем регистр совпадения 
            x = dfa[pat.charAt(j)][x];     // Обновляем регистр совпадения 
        } 
    } 

    // Функция предварительно обрабатывает массив шаблона
    public KMP(char[] pattern, int R) {
        this.R = R;
        this.m = pattern.length;

        // Строим DFA(Детерминированный конечный автомат) из шаблона
        int m = pattern.length; // Передаём в переменную значение длины массива шаблона
        dfa = new int[R][m]; // Объявляем двумерный массив 
        dfa[pattern[0]][0] = 1; 
        for (int x = 0, j = 1; j < m; j++) {
            for (int c = 0; c < R; c++) 
                dfa[c][j] = dfa[c][x];     // Копируем случаи несоовпадения  
            dfa[pattern[j]][j] = j+1;      // Устанавливаем регистр совпадения 
            x = dfa[pattern[j]][x];        // Обновляем регистр совпадения  
        } 
    } 

    // Функция возвращает индекс первого вхождения строки шаблона в текстовой строке
    public int search(String txt) {

        // Иммитируем работу DFA(Детерминированный конечный автомат) с текстом
        int n = txt.length(); // Передаём в переменную значение длины строки
        int i, j;
        for (i = 0, j = 0; i < n && j < m; i++) {
            j = dfa[txt.charAt(i)][j];
        }
        if (j == m) return i - m;    // Если найден
        return n;                    // Если не найден
    }

    // Функция возвращает индекс первого вхождения строки шаблона в текстовой строке
    public int search(char[] text) {

        // Иммитируем работу DFA(Детерминированный конечный автомат) с текстом
        int n = text.length; // Передаём в переменную значение длины массива текста
        int i, j;
        for (i = 0, j = 0; i < n && j < m; i++) {
            j = dfa[text[i]][j];
        }
        if (j == m) return i - m;    // Если найден
        return n;                    // Если не найден
    }
}
